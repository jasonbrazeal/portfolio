[project]
name = "traditional-intent-classification"
version = "1.0.0"
description = "traditional machine learning approach to intent classification"
authors = [
  {name = "Jason Brazeal", email = "dev@jasonbrazeal.com"},
]
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "IPython",
    "joblib",
    "matplotlib",
    "nltk",
    "nltk",
    "numpy<2.0.0",
    "openai",
    "pandas",
    "pydantic",
    "requests",
    "scikit-learn",
    "spacy",
    "en_core_web_trf @ https://github.com/explosion/spacy-models/releases/download/en_core_web_trf-3.7.3/en_core_web_trf-3.7.3-py3-none-any.whl",
    "torch",
    "tqdm",
    "jupyterlab>=4.4.2",
    "jupytext>=1.17.1",
]

[project.urls]
"Author Homepage" = "https://jasonbrazeal.com"

[tool.setuptools.packages.find]
where = ["."]
include = []

[tool.ruff]
line-length = 99
indent-width = 4

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "single"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.uv]
package = false
python-downloads = "manual"
python-preference = "only-system" # don't download new python versions
compile-bytecode = true

[tool.uv.pip]
generate-hashes = true
output-file = "requirements.txt"
